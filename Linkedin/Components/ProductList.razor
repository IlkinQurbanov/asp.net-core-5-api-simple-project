@using Microsoft.AspNetCore.Components.Web
@using Linkedin.Models
@using Linkedin.Services
@namespace Linkedin.Components

@inject JsonFileProductService ProductService




<div class="card-colums">

    @if (selectedProduct != null)
    {
        @foreach (var product in ProductService.GetProducts())
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');"></div>
                <div class="card-body">
                    <h5 class="card-title">
                        @product.Title
                    </h5>
                </div>
            </div>

            <div class="modal-footer">
                @if(voteCount ==0)
                {
                    <span>Be the first o vote!</span>
                }
                else
                {
                    <span>@voteCount @voteLabel</span>
                }
                @for(int i =0; i < 6; i++)
                {
                    var currentStar = i;
                    if(i <= currentRating)
                    {
                         <span class="fa-star fa checked" onclick="(e => SubmitRating(currentStar))"></span>
                    }
                    else
                    {
                        <span class="fa-star fa" onclick="(e => SubmitRating(currentStar))"></span>
                    }
                }
            </div>

            <div class="card-footer">
                <small class="text-muter">
                    <button onclick="(e => SelectProduct(product.Id))"
                            data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                        More info
                    </button>
                </small>
            </div>
        }


    }


</div>



@code {
    Product selectedProduct;
    string selectProductId;

    void SelectProduct(string productId)
    {
        selectProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }
        Console.WriteLine($"Current rating for {selectedProduct.Id} : {currentRating}");

    }

    void SubmitRating(int rating)
    {
        Console.WriteLine($"Rating  received for {selectedProduct.Id} : {currentRating}");
        ProductService.AddRating(selectProductId,  rating);
        SelectProduct(selectProductId);

    }



}
